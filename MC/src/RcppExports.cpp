// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// q_target
double q_target(double x);
RcppExport SEXP _MC_q_target(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(q_target(x));
    return rcpp_result_gen;
END_RCPP
}
// colVars
NumericVector colVars(NumericMatrix mat);
RcppExport SEXP _MC_colVars(SEXP matSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type mat(matSEXP);
    rcpp_result_gen = Rcpp::wrap(colVars(mat));
    return rcpp_result_gen;
END_RCPP
}
// importance_sampling_std
List importance_sampling_std(int n);
RcppExport SEXP _MC_importance_sampling_std(SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(importance_sampling_std(n));
    return rcpp_result_gen;
END_RCPP
}
// rejection_sampling
List rejection_sampling(int n);
RcppExport SEXP _MC_rejection_sampling(SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(rejection_sampling(n));
    return rcpp_result_gen;
END_RCPP
}
// sir_sampling
List sir_sampling(int m, int n_resample);
RcppExport SEXP _MC_sir_sampling(SEXP mSEXP, SEXP n_resampleSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type m(mSEXP);
    Rcpp::traits::input_parameter< int >::type n_resample(n_resampleSEXP);
    rcpp_result_gen = Rcpp::wrap(sir_sampling(m, n_resample));
    return rcpp_result_gen;
END_RCPP
}
// riemann_estimator
double riemann_estimator(NumericVector samples);
RcppExport SEXP _MC_riemann_estimator(SEXP samplesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type samples(samplesSEXP);
    rcpp_result_gen = Rcpp::wrap(riemann_estimator(samples));
    return rcpp_result_gen;
END_RCPP
}
// comparison
List comparison(int n_reps, int n_samples);
RcppExport SEXP _MC_comparison(SEXP n_repsSEXP, SEXP n_samplesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n_reps(n_repsSEXP);
    Rcpp::traits::input_parameter< int >::type n_samples(n_samplesSEXP);
    rcpp_result_gen = Rcpp::wrap(comparison(n_reps, n_samples));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_MC_q_target", (DL_FUNC) &_MC_q_target, 1},
    {"_MC_colVars", (DL_FUNC) &_MC_colVars, 1},
    {"_MC_importance_sampling_std", (DL_FUNC) &_MC_importance_sampling_std, 1},
    {"_MC_rejection_sampling", (DL_FUNC) &_MC_rejection_sampling, 1},
    {"_MC_sir_sampling", (DL_FUNC) &_MC_sir_sampling, 2},
    {"_MC_riemann_estimator", (DL_FUNC) &_MC_riemann_estimator, 1},
    {"_MC_comparison", (DL_FUNC) &_MC_comparison, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_MC(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
