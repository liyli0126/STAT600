// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// bisection
List bisection(double a, double b, const arma::vec& x, double tol, int max_iter);
RcppExport SEXP _Optimization_bisection(SEXP aSEXP, SEXP bSEXP, SEXP xSEXP, SEXP tolSEXP, SEXP max_iterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    Rcpp::traits::input_parameter< double >::type b(bSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< int >::type max_iter(max_iterSEXP);
    rcpp_result_gen = Rcpp::wrap(bisection(a, b, x, tol, max_iter));
    return rcpp_result_gen;
END_RCPP
}
// newton
List newton(double theta0, const arma::vec& x, double tol, int max_iter);
RcppExport SEXP _Optimization_newton(SEXP theta0SEXP, SEXP xSEXP, SEXP tolSEXP, SEXP max_iterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type theta0(theta0SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< int >::type max_iter(max_iterSEXP);
    rcpp_result_gen = Rcpp::wrap(newton(theta0, x, tol, max_iter));
    return rcpp_result_gen;
END_RCPP
}
// fisher_scoring
List fisher_scoring(double theta0, const arma::vec& x, double tol, int max_iter);
RcppExport SEXP _Optimization_fisher_scoring(SEXP theta0SEXP, SEXP xSEXP, SEXP tolSEXP, SEXP max_iterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type theta0(theta0SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< int >::type max_iter(max_iterSEXP);
    rcpp_result_gen = Rcpp::wrap(fisher_scoring(theta0, x, tol, max_iter));
    return rcpp_result_gen;
END_RCPP
}
// secant
List secant(double theta0, double theta1, const arma::vec& x, double tol, int max_iter);
RcppExport SEXP _Optimization_secant(SEXP theta0SEXP, SEXP theta1SEXP, SEXP xSEXP, SEXP tolSEXP, SEXP max_iterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type theta0(theta0SEXP);
    Rcpp::traits::input_parameter< double >::type theta1(theta1SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< int >::type max_iter(max_iterSEXP);
    rcpp_result_gen = Rcpp::wrap(secant(theta0, theta1, x, tol, max_iter));
    return rcpp_result_gen;
END_RCPP
}
// logistic_predict
arma::vec logistic_predict(const arma::mat& X, const arma::vec& beta);
RcppExport SEXP _Optimization_logistic_predict(SEXP XSEXP, SEXP betaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type beta(betaSEXP);
    rcpp_result_gen = Rcpp::wrap(logistic_predict(X, beta));
    return rcpp_result_gen;
END_RCPP
}
// logistic_lik
double logistic_lik(const arma::mat& X, const arma::vec& response, const arma::vec& beta);
RcppExport SEXP _Optimization_logistic_lik(SEXP XSEXP, SEXP responseSEXP, SEXP betaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type response(responseSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type beta(betaSEXP);
    rcpp_result_gen = Rcpp::wrap(logistic_lik(X, response, beta));
    return rcpp_result_gen;
END_RCPP
}
// multi_newton
List multi_newton(const arma::mat& X, const arma::vec& y, double tol, int max_iter);
RcppExport SEXP _Optimization_multi_newton(SEXP XSEXP, SEXP ySEXP, SEXP tolSEXP, SEXP max_iterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< int >::type max_iter(max_iterSEXP);
    rcpp_result_gen = Rcpp::wrap(multi_newton(X, y, tol, max_iter));
    return rcpp_result_gen;
END_RCPP
}
// score
arma::vec score(const arma::vec& beta, const arma::mat& X, const arma::vec& y);
RcppExport SEXP _Optimization_score(SEXP betaSEXP, SEXP XSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(score(beta, X, y));
    return rcpp_result_gen;
END_RCPP
}
// hessian
arma::mat hessian(const arma::vec& beta, const arma::mat& X, const arma::vec& y);
RcppExport SEXP _Optimization_hessian(SEXP betaSEXP, SEXP XSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(hessian(beta, X, y));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_Optimization_bisection", (DL_FUNC) &_Optimization_bisection, 5},
    {"_Optimization_newton", (DL_FUNC) &_Optimization_newton, 4},
    {"_Optimization_fisher_scoring", (DL_FUNC) &_Optimization_fisher_scoring, 4},
    {"_Optimization_secant", (DL_FUNC) &_Optimization_secant, 5},
    {"_Optimization_logistic_predict", (DL_FUNC) &_Optimization_logistic_predict, 2},
    {"_Optimization_logistic_lik", (DL_FUNC) &_Optimization_logistic_lik, 3},
    {"_Optimization_multi_newton", (DL_FUNC) &_Optimization_multi_newton, 4},
    {"_Optimization_score", (DL_FUNC) &_Optimization_score, 3},
    {"_Optimization_hessian", (DL_FUNC) &_Optimization_hessian, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_Optimization(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
